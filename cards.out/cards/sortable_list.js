// Compiled by ClojureScript 1.7.170 {:static-fns true, :optimize-constants true}
goog.provide('cards.sortable_list');
goog.require('cljs.core');
goog.require('clojure.string');
goog.require('devcards.core');
goog.require('om.dom');
goog.require('kanban.components.card');
goog.require('kanban.components.sortable_list');
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cards$sortable_list,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,"# Sortable List\n\n  This is a generic list component that takes a sequence of items\n  and allows these to be reordered via drag and drop. Custom functions\n  to identify items and to render them in the list are supported.\n\n  ## Invocation\n\n  The overall sortable list invocation looks like this:\n  ```\n  (sortable-list {:items ...\n                  :direction ...\n                  :key-fn (fn [item] ...)\n                  :element-fn (fn [item] ...)\n                  :change-fn (fn [items] ...)})\n  ```\n\n  Parameters:\n\n  * `:items` is an ordered sequence of items of any type\n  * `:direction` specifies the direction of the list and has to be either\n    `:vertical` or `:horizontal`, with `:horizontal` being the default\n    direction\n  * `:key-fn` is function that must return a unique key for each item\n  * `:element-fn` is a function that must return a React element for each\n    item\n  * `:change-fn` is a function that is called whenever the order of items\n    in the list changes; it receives an ordered sequence of items in the\n    same form that they were passed in to `:items`, so if `:items [1 2]`\n    was passed in, `:change-fn` may be called with `[2 1]`.\n\n  ### Example invocation\n\n  ```\n  (def data (atom {:people [{:id 1 :name \"John\"} {:id 2 :name \"Tina\"}]}))\n  ...\n  (sortable-list {:items (:people @data)\n                  :key-fn :id\n                  :element-fn (fn [person] (dom/span (:name person)))\n                  :change-fn (fn [people] (swap! data assoc :people people))})\n  ```\n\n  Of course, rather than operating against a plain atom and having to watch\n  it for changes yourself, you would normally use `sortable-list` with Om\n  Next and have `:change-fn` mutate the app state.",cljs.core.cst$kw$main_DASH_obj,null,cljs.core.cst$kw$initial_DASH_data,null,cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(null)], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cards$sortable_list,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,"## Examples",cljs.core.cst$kw$main_DASH_obj,null,cljs.core.cst$kw$initial_DASH_data,null,cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(null)], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cards$sortable_list,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,"### Sortable list with words",cljs.core.cst$kw$main_DASH_obj,(function (state,_){
var G__23614 = new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$items,cljs.core.cst$kw$items.cljs$core$IFn$_invoke$arity$1((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(state) : cljs.core.deref.call(null,state))),cljs.core.cst$kw$key_DASH_fn,cljs.core.identity,cljs.core.cst$kw$element_DASH_fn,(function (word){
var G__23615 = {"style": {"border": "thin solid black", "padding": "1rem", "display": "inline-block"}};
var G__23616 = om.util.force_children(word);
return React.DOM.span(G__23615,G__23616);
}),cljs.core.cst$kw$change_DASH_fn,(function (p1__23611_SHARP_){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc,cljs.core.cst$kw$items,p1__23611_SHARP_);
})], null);
return (kanban.components.sortable_list.sortable_list.cljs$core$IFn$_invoke$arity$1 ? kanban.components.sortable_list.sortable_list.cljs$core$IFn$_invoke$arity$1(G__23614) : kanban.components.sortable_list.sortable_list.call(null,G__23614));
}),cljs.core.cst$kw$initial_DASH_data,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$items,clojure.string.split.cljs$core$IFn$_invoke$arity$2("This is a list of short words"," ")], null),cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$inspect_DASH_data,true], null))], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cards$sortable_list,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,"### Sortable list with numbers and a different element function",cljs.core.cst$kw$main_DASH_obj,(function (state,_){
var G__23620 = new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$items,cljs.core.cst$kw$items.cljs$core$IFn$_invoke$arity$1((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(state) : cljs.core.deref.call(null,state))),cljs.core.cst$kw$key_DASH_fn,cljs.core.identity,cljs.core.cst$kw$element_DASH_fn,(function (number){
var G__23621 = {"style": {"background": "#eee", "padding": "0.5rem", "display": "inline-block"}};
var G__23622 = om.util.force_children(number);
return React.DOM.span(G__23621,G__23622);
}),cljs.core.cst$kw$change_DASH_fn,(function (p1__23617_SHARP_){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc,cljs.core.cst$kw$items,p1__23617_SHARP_);
})], null);
return (kanban.components.sortable_list.sortable_list.cljs$core$IFn$_invoke$arity$1 ? kanban.components.sortable_list.sortable_list.cljs$core$IFn$_invoke$arity$1(G__23620) : kanban.components.sortable_list.sortable_list.call(null,G__23620));
}),cljs.core.cst$kw$initial_DASH_data,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$items,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(10000),(20000),(30000),(40000),(50000),(60000)], null)], null),cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$inspect_DASH_data,true], null))], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cards$sortable_list,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,"### Vertical sortable list with cards",cljs.core.cst$kw$main_DASH_obj,(function (state,_){
var G__23624 = {"className": "sortable-list-vertical"};
var G__23625 = om.util.force_children((function (){var G__23626 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$items,cljs.core.cst$kw$items.cljs$core$IFn$_invoke$arity$1((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(state) : cljs.core.deref.call(null,state))),cljs.core.cst$kw$direction,cljs.core.cst$kw$vertical,cljs.core.cst$kw$key_DASH_fn,cljs.core.cst$kw$id,cljs.core.cst$kw$element_DASH_fn,((function (G__23624){
return (function (card){
return (kanban.components.card.card.cljs$core$IFn$_invoke$arity$1 ? kanban.components.card.card.cljs$core$IFn$_invoke$arity$1(card) : kanban.components.card.card.call(null,card));
});})(G__23624))
,cljs.core.cst$kw$change_DASH_fn,((function (G__23624){
return (function (p1__23623_SHARP_){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc,cljs.core.cst$kw$items,p1__23623_SHARP_);
});})(G__23624))
], null);
return (kanban.components.sortable_list.sortable_list.cljs$core$IFn$_invoke$arity$1 ? kanban.components.sortable_list.sortable_list.cljs$core$IFn$_invoke$arity$1(G__23626) : kanban.components.sortable_list.sortable_list.call(null,G__23626));
})());
return React.DOM.div(G__23624,G__23625);
}),cljs.core.cst$kw$initial_DASH_data,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$items,new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$id,(1),cljs.core.cst$kw$text,"This is the first card"], null),new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$id,(2),cljs.core.cst$kw$text,"This is the second card, this time with an assignee",cljs.core.cst$kw$assignees,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$id,(10),cljs.core.cst$kw$username,"ada",cljs.core.cst$kw$name,"Ada Lovelace"], null)], null)], null),new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$id,(3),cljs.core.cst$kw$text,"This is the third card"], null),new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$id,(4),cljs.core.cst$kw$text,"This is the fourth card"], null),new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$id,(5),cljs.core.cst$kw$text,"This is the fifth card"], null),new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$id,(6),cljs.core.cst$kw$text,"This is the sixth card"], null),new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$id,(7),cljs.core.cst$kw$text,"This is the seventh card"], null),new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$id,(8),cljs.core.cst$kw$text,"This is the eighth card"], null)], null)], null),cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$inspect_DASH_data,true], null))], 0))], null));
})], null));
