;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name kanban.parsing.boards, :imports nil, :requires {lanes kanban.parsing.lanes, kanban.parsing.lanes kanban.parsing.lanes, kanban.reconciler kanban.reconciler}, :uses {mutate kanban.reconciler, read kanban.reconciler}, :defs {resolve-lanes {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/fst/7o2s6s/kanban/parsing/boards.cljs", :line 5, :column 7, :end-line 5, :end-column 20, :arglists (quote ([st board]))}, :name kanban.parsing.boards/resolve-lanes, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/fst/7o2s6s/kanban/parsing/boards.cljs", :end-column 20, :method-params ([st board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st board]))}, get-board {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/fst/7o2s6s/kanban/parsing/boards.cljs", :line 8, :column 7, :end-line 8, :end-column 16, :arglists (quote ([st ref]))}, :name kanban.parsing.boards/get-board, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/fst/7o2s6s/kanban/parsing/boards.cljs", :end-column 16, :method-params ([st ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st ref]))}, get-boards {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/fst/7o2s6s/kanban/parsing/boards.cljs", :line 12, :column 7, :end-line 12, :end-column 17, :arglists (quote ([st key]))}, :name kanban.parsing.boards/get-boards, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/fst/7o2s6s/kanban/parsing/boards.cljs", :end-column 17, :method-params ([st key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st key]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:lanes :ref :boards/active :value :state :action boards/activate :boards}, :order [:lanes :boards :state :value :boards/active boards/activate :ref :action]}, :doc nil}