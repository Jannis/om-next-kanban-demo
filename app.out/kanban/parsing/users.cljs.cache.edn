;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name kanban.parsing.users, :imports nil, :requires {kanban.reconciler kanban.reconciler}, :uses {mutate kanban.reconciler, read kanban.reconciler}, :defs {get-user {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/1vx/7o2s6s/kanban/parsing/users.cljs", :line 4, :column 7, :end-line 4, :end-column 15, :arglists (quote ([st ref]))}, :name kanban.parsing.users/get-user, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/1vx/7o2s6s/kanban/parsing/users.cljs", :end-column 15, :method-params ([st ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st ref]))}, get-users {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/1vx/7o2s6s/kanban/parsing/users.cljs", :line 7, :column 7, :end-line 7, :end-column 16, :arglists (quote ([st key]))}, :name kanban.parsing.users/get-users, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/1vx/7o2s6s/kanban/parsing/users.cljs", :end-column 16, :method-params ([st key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st key]))}, resolve-users {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/1vx/7o2s6s/kanban/parsing/users.cljs", :line 11, :column 7, :end-line 11, :end-column 20, :arglists (quote ([st refs]))}, :name kanban.parsing.users/resolve-users, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/1vx/7o2s6s/kanban/parsing/users.cljs", :end-column 20, :method-params ([st refs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st refs]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:value :state :users}, :order [:users :state :value]}, :doc nil}