;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{replace}, :name sablono.util, :imports {Uri goog.Uri}, :requires {Uri goog.Uri, clojure.set clojure.set, clojure.string clojure.string}, :uses {capitalize clojure.string, join clojure.string, replace clojure.string, rename-keys clojure.set, split clojure.string, blank? clojure.string}, :defs {join-classes {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 107, :column 7, :end-line 107, :end-column 19, :arglists (quote ([classes])), :doc "Join the `classes` with a whitespace."}, :name sablono.util/join-classes, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 19, :method-params ([classes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([classes])), :doc "Join the `classes` with a whitespace."}, compact-map {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 52, :column 7, :end-line 52, :end-column 18, :arglists (quote ([m])), :doc "Removes all map entries where the value of the entry is empty."}, :name sablono.util/compact-map, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Removes all map entries where the value of the entry is empty."}, to-str {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 10, :column 4, :end-line 10, :end-column 10, :protocol sablono.util/ToString, :doc "Convert a value into a string.", :arglists (quote ([x]))}, :protocol sablono.util/ToString, :name sablono.util/to-str, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Convert a value into a string."}, react-fn {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 117, :column 7, :end-line 117, :end-column 15, :arglists (quote ([type])), :doc "Return the symbol of a fn that build a React element. "}, :name sablono.util/react-fn, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 15, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type])), :doc "Return the symbol of a fn that build a React element. "}, camel-case-keys {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 33, :column 7, :end-line 33, :end-column 22, :arglists (quote ([m])), :doc "Recursively transforms all map keys into camel case."}, :name sablono.util/camel-case-keys, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 22, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Recursively transforms all map keys into camel case."}, match-tag {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 79, :column 7, :end-line 79, :end-column 16, :arglists (quote ([s])), :doc "Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes."}, :name sablono.util/match-tag, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes."}, *base-url* {:name sablono.util/*base-url*, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 7, :column 1, :end-line 7, :end-column 26, :dynamic true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 7, :column 16, :end-line 7, :end-column 26, :dynamic true}}, normalize-element {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 95, :column 7, :end-line 95, :end-column 24, :arglists (quote ([[tag & content]])), :doc "Ensure an element vector is of the form [tag-name attrs content]."}, :name sablono.util/normalize-element, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 24, :method-params ([p__17437]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag & content]])), :doc "Ensure an element vector is of the form [tag-name attrs content]."}, as-str {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([& xs])), :doc "Converts its arguments into a string using to-str.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name sablono.util/as-str, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists ([& xs]), :doc "Converts its arguments into a string using to-str."}, strip-outer {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 135, :column 7, :end-line 135, :end-column 18, :arglists (quote ([s])), :doc "Strip the outer HTML tag from the string `s`."}, :name sablono.util/strip-outer, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Strip the outer HTML tag from the string `s`."}, strip-attr {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 130, :column 7, :end-line 130, :end-column 17, :arglists (quote ([s attr])), :doc "Strip the HTML attribute `attr` and it's value from the string `s`."}, :name sablono.util/strip-attr, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 17, :method-params ([s attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s attr])), :doc "Strip the HTML attribute `attr` and it's value from the string `s`."}, html-to-dom-attrs {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 45, :column 7, :end-line 45, :end-column 24, :arglists (quote ([attrs])), :doc "Converts all HTML attributes to their DOM equivalents."}, :name sablono.util/html-to-dom-attrs, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 24, :method-params ([attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attrs])), :doc "Converts all HTML attributes to their DOM equivalents."}, strip-css {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 75, :column 7, :end-line 75, :end-column 16, :arglists (quote ([s])), :doc "Strip the # and . characters from the beginning of `s`."}, :name sablono.util/strip-css, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Strip the # and . characters from the beginning of `s`."}, ToString {:meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 9, :column 14, :end-line 9, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {to-str [[x]]}}}, :protocol-symbol true, :name sablono.util/ToString, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 22, :column 1, :line 9, :protocol-info {:methods {to-str [[x]]}}, :info nil, :end-line 9, :impls #{nil goog/Uri cljs/core.Keyword number default}, :doc nil, :jsdoc ("@interface")}, attr-pattern {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 124, :column 7, :end-line 124, :end-column 19, :arglists (quote ([attr])), :doc "Returns a regular expression that matches the HTML attribute `attr`\n  and it's value."}, :name sablono.util/attr-pattern, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 19, :method-params ([attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attr])), :doc "Returns a regular expression that matches the HTML attribute `attr`\n  and it's value."}, ToURI {:meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 12, :column 14, :end-line 12, :end-column 19, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {to-uri [[x]]}}}, :protocol-symbol true, :name sablono.util/ToURI, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 19, :column 1, :line 12, :protocol-info {:methods {to-uri [[x]]}}, :info nil, :end-line 12, :impls #{goog/Uri default}, :doc nil, :jsdoc ("@interface")}, camel-case {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([k])), :doc "Returns camel case version of the key, e.g. :http-equiv becomes :httpEquiv."}, :name sablono.util/camel-case, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 17, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Returns camel case version of the key, e.g. :http-equiv becomes :httpEquiv."}, to-uri {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 13, :column 4, :end-line 13, :end-column 10, :protocol sablono.util/ToURI, :doc "Convert a value into a URI.", :arglists (quote ([x]))}, :protocol sablono.util/ToURI, :name sablono.util/to-uri, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Convert a value into a URI."}, wrapped-type? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 112, :column 7, :end-line 112, :end-column 20, :arglists (quote ([type])), :doc "Return true if the element `type` needs to be wrapped."}, :name sablono.util/wrapped-type?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 20, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type])), :doc "Return true if the element `type` needs to be wrapped."}, merge-with-class {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :line 62, :column 7, :end-line 62, :end-column 23, :arglists (quote ([& maps])), :doc "Like clojure.core/merge but concatenate :class entries.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name sablono.util/merge-with-class, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-next-kanban-demo/hx0/-8010a8/app.out/sablono/util.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 0, :fn-var true, :arglists ([& maps]), :doc "Like clojure.core/merge but concatenate :class entries."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :content :default :className :style :textarea :option :for sablono.interpreter/create-element :id :class :htmlFor js/React.createElement :tag :input}, :order [:style :class :for :className :htmlFor :else :tag :default :content :id :textarea :option :input sablono.interpreter/create-element js/React.createElement]}, :doc nil}